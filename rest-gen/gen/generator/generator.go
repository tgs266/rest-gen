package generator

import (
	"fmt"
	"path/filepath"

	"github.com/dave/jennifer/jen"
	"github.com/tgs266/rest-gen/rest-gen/spec"
	"github.com/tgs266/rest-gen/rest-gen/utils"
)

type FileType = string

const (
	FILETYPE_STRUCT FileType = "structs"
	FILETYPE_ALIAS  FileType = "aliases"

	FILETYPE_SERVICE FileType = "services"
	FILETYPE_SERVER  FileType = "servers"
)

type Generator struct {
	Spec            *spec.Spec
	PkgPath         string
	PkgName         string
	SrcModPath      string
	BaseImportPath  string
	ServerGenerator ServerGeneratorInterface

	Files map[FileType]*jen.File
}

func (g *Generator) Run() {
	g.Spec.Parse(g.BaseImportPath)
	for _, oName := range utils.GetSortedKeys(g.Spec.Types.Objects) {
		o := g.Spec.Types.Objects[oName]
		if err := o.Parse(g.Spec); err != nil {
			panic(fmt.Errorf("failed to parse object %s: %s", oName, err))
		}
		switch o.ObjectType {
		case spec.STRUCT:
			g.createFile(FILETYPE_STRUCT)
			g.writeStruct(oName, o)
		case spec.ALIAS:
			g.createFile(FILETYPE_ALIAS)
			g.writeAlias(oName, o)
		}
	}

	for _, sName := range utils.GetSortedKeys(g.Spec.Services) {
		service := g.Spec.Services[sName]
		if err := service.Parse(g.Spec); err != nil {
			panic(fmt.Errorf("failed to parse service %s: %s", sName, err))
		}
		g.createFile(FILETYPE_SERVICE)
		g.writeService(sName, service)

		g.createFile(FILETYPE_SERVER)
		g.writeServer(sName, service, g.ServerGenerator)
	}

	g.closeAll()
}

func (g *Generator) createFile(fileType FileType) {
	if _, exists := g.Files[fileType]; exists {
		return
	}
	fileName := fmt.Sprintf("%s.%s.go", g.PkgName, fileType)
	file := jen.NewFilePathName(g.PkgPath, g.PkgName)
	file.PackageComment("this file is autogenerated by rest-gen - do not edit")
	g.writeImports(file)
	g.Files[fileType] = file
	file.Save(filepath.Join(g.PkgPath, fileName))
}

func (g *Generator) closeFile(fileType FileType) {
	if _, exists := g.Files[fileType]; !exists {
		return
	}
	fileName := fmt.Sprintf("%s.%s.go", g.PkgName, fileType)
	if err := g.Files[fileType].Save(filepath.Join(g.PkgPath, fileName)); err != nil {
		panic(fmt.Errorf("could not save %s: %s", filepath.Join(g.PkgPath, fileName), err))
	}
}

func (g *Generator) closeAll() {
	g.closeFile(FILETYPE_STRUCT)
	g.closeFile(FILETYPE_ALIAS)
	g.closeFile(FILETYPE_SERVICE)
	g.closeFile(FILETYPE_SERVER)
}
